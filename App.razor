


@if (BootComplete) {
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
}
@inject IJSRuntime JS;
@implements IDisposable
@inject NavigationManager NavigationManager
@code 
{

    // boot code. By hiding everything nothing starts until bootcomplete is set to true
    // that is done after the successful exit from OnInitializedAsync
    // App.Boot has to be async becuase it does 'IO'

    bool BootComplete = false;

    protected override async Task OnInitializedAsync() {
        // hand off the JS runtime to util library

        //    string[] lines =
        //{
        //    "First line", "Second line", "Third line" 
        //};

        //await File.WriteAllLinesAsync("WriteLines.txt", lines);

        // string[] lines2 = System.IO.File.ReadAllLines(@"WriteLines.txt");
        EarWorm.Code.Util.Init(JS);
        await EarWorm.Code.Application.Boot();
         // Subscribe to the event
        NavigationManager.LocationChanged += LocationChanged;
        BootComplete = true;
    }
}

@code{
    protected override void OnInitialized()
    {
        // Subscribe to the event
        //NavigationManager.LocationChanged += LocationChanged;
        //base.OnInitialized();
    }
    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        var uri = new Uri(e.Location);
        Util.Log($"path = {uri.LocalPath}");
         EarWorm.Code.Application.OnMenuNavigate();
    }
void IDisposable.Dispose()
{
  // Unsubscribe from the event when our component is disposed
  NavigationManager.LocationChanged -= LocationChanged;
}
}