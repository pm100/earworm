@using EarWorm.Code

@code{
	string guid = System.Guid.NewGuid().ToString();
}
<HxDropdown>
	<div class="container">
		<div class="row align-items-center">
			<div class="col">
			<label for="@guid" >@Label</label>
			</div>
			<div class="col">
			<HxDropdownToggleButton  id="@guid" Color="ThemeColor.Primary">@ButtonText</HxDropdownToggleButton>
	<HxDropdownMenu CssClass="dropDownScroll">
		@for (int i = 0; i < Items.Count; i++)
		{
			int j = i;
			<HxDropdownItem OnClick="()=>Click(j)">@(Items[j])</HxDropdownItem>
		}
	</HxDropdownMenu>
	</div>
</div>
</div>
</HxDropdown>


@code {
		[Parameter]
	public string Label { get; set; }
	[Parameter]
	public IList<string> Items { get; set; }

	[Parameter]
	public string ButtonText { get
		{
			if(_currentSelection != -1)
			{
				return Items[_currentSelection];
			}
			else
			{
				return _configuredText;
			}
		}

		set
		{
			_configuredText = value;
			
		} }

	[Parameter]
	public int Selected
	{
		get
		{
			return _currentSelection;
		}
		set
		{
			_configuredSelection = value;
		if(_currentSelection == -1)
			_currentSelection = value;
		}
	}

	[Parameter]
	public EventCallback<int> OnSelectionChange { get; set; }

	int _currentSelection = -1;
	int _configuredSelection = -1;
	string _configuredText;

	async void Click(int i)
	{
		Util.Log($"click = {i} sel ={Selected}");
		ButtonText = Items[i];
		if(i != _currentSelection)
		{
			await OnSelectionChange.InvokeAsync(i);
		}
		_currentSelection = i;
	}

	public  override async Task SetParametersAsync(ParameterView par)
	{
		Util.Log("params");
		var oldSel = Selected;
		await base.SetParametersAsync(par);
	}


}
