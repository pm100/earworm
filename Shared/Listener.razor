
<HxModal @ref="_modal" Title="Listening" OnClosed="Closed" OnShown="Shown">
	<BodyTemplate>
		<div>
			I heard: @_notes
		</div>
		<HxBadge Color="ThemeColor.Success">Yup</HxBadge>
		<HxProgress>
    <HxProgressBar Label="" MaxValue=@Max Value=@Time />
</HxProgress>

	</BodyTemplate>
	<FooterTemplate>
		<HxButton Text="Close" OnClick="HandleClose" Color="ThemeColor.Primary" />
	</FooterTemplate>
</HxModal>



@using Microsoft.JSInterop
@using System.Threading;
@using EarWorm.Code;
@inject IJSRuntime JS
@implements IDisposable
@code
{
	public enum ListenResult{
		Matched,
		Failed,
		Timeout,
		Abandoned,
		RetryLimit
	}
	Timer _timer;
	int Time;
	int Max;
	HxModal _modal;

	bool _listening;
	MusicEngine.TestResult _result;
	Mode _mode;
	TaskCompletionSource<MusicEngine.TestResult> _tcs;
	static Listener s_listenerInstance;
	private string _notes;
	IList<int> _noteList;
	int _noteIdx;
	DateTime _startTime;


	void StartTimer(int max)
	{
		Max = Time = max * 10;
		_timer = new Timer(async _ =>  
		{
			Time-=1;
			if(Time == 0)
			{
				// timeout
				Stop(ListenResult.Timeout);
			}
			else
				await InvokeAsync(StateHasChanged);
		}, null, 0, 100);
	}
	public enum Mode
	{
		Test,
		Train
	}
	public Listener()
	{
		Util.Log("construct");
		s_listenerInstance = this;
	}
	public  Task<MusicEngine.TestResult>  Show(Mode mode, IList<int> notes)
	{
		_tcs = new TaskCompletionSource<MusicEngine.TestResult>();
		Init(mode);
		_noteList = notes;
		//	StartTimer(20);
		 _modal.ShowAsync();
		StartJSListener();
		_startTime = DateTime.Now;
		return _tcs.Task;
	}

	private void Init(Mode mode)
	{
		Util.Log("init");
		_notes = "";
		_mode = mode;
		_noteIdx = 0;
		_result = new MusicEngine.TestResult {
				LR = ListenResult.Abandoned
			};
	}
	private void Note(int n)
	{
		Util.Log($"note = {n}, listen = {_listening}");
		// to deal with any last note notification left over
		if (!_listening)
			return;

		var me = Application.MusicEngine;
		var noteStr = me.GetNoteName(n);

		// did they play the correct note?
		if (_noteList[_noteIdx] == n) {
			// yes, move to the next one
			_noteIdx++;
			if (_noteIdx == _noteList.Count) {
				// all matched - woo hoo
				Stop(ListenResult.Matched);
			}
		}
		else {
			// wrong note, we are out of here
			_result.FailedNote = _noteIdx;
			Stop(ListenResult.Failed);
		}	
		_notes += String.Format("{0} ", noteStr);
		StateHasChanged();
	}
	private void StartJSListener()
	{
		JS.InvokeVoidAsync("pitchStart","earworm", "NoteHeard");
		//_listening = true;
	}
	private void StopJSListener()
	{
		_listening = false;
		JS.InvokeVoidAsync("pitchStop");
	}

	// JS listener call back when note heard
	[JSInvokable]
	public static void NoteHeard(int note)
	{
		s_listenerInstance.Note(note);
	}

	private  async void Stop(ListenResult result)
	{
		if(_timer != null) {
			_timer.Dispose();
			_timer = null;			
		}
		StopJSListener();
		_result.LR = result;
		Util.Log("hide1");
		await _modal.HideAsync();
		Util.Log(string.Format("stop result={0}", result));
	}

	private void Closed(){
		Util.Log($"closed {_listening}");
		if (_listening) {
			_timer.Dispose();
			_timer = null;
			StopJSListener();
		}
		Util.Log(string.Format("set task={0}", _result));
		_result.Time = DateTime.Now - _startTime;
		_tcs.SetResult(_result);
		_tcs = null;
	}

	private void HandleClose()
	{
		Util.Log($"hc {_listening}");
		Stop(ListenResult.Abandoned);
		StateHasChanged();
	}
	private void Shown() {
		Util.Log($"shown {_listening}");
		_listening = true;
		
	}
	public void Dispose()
	{
		if (_timer != null)
		{
			_timer.Dispose();
			_timer = null;
		}
	}
}
