@page "/test"
@using EarWorm.Code;
@inject MusicEngine _musicEngine
@inject SavedData _saver
@implements IDisposable
<Listener @ref=_listener />
<p>@SetDescription</p>

<div class="container">
    <div class="row px-3">
        <div class="col-md-6 col-lg-4 col-xl-3 p-3">
            <HxButton Text="@StartButtonText" OnClick="StartClick" Color="ThemeColor.Primary" Enabled="ShowButtons" />
        </div>
        @if (@ShowResume) {
            <div class="col-md-6 col-lg-4 col-xl-3 p-3">

                <HxButton Text="Continue" OnClick="ResumeClick" Color="ThemeColor.Primary" Enabled="ShowButtons" />
            </div>
        }
    </div>
    @if (@ShowRoll) {
        <div class="row px-3">
            <div class="col-md-6 col-lg-4 col-xl-3 p-3">
            @*<HxInputCheckbox ValueExpression="@(()=>RollNext)" Label="Automatically start next test" ValueChanged = "RollChanged"/>*@
               <HxInputCheckbox @bind-Value="RollNext" Label="Automatically start next test" />
        </div>
        <div class="col-md-6 col-lg-4 col-xl-3 p-3">

            <HxProgress>
                <HxProgressBar Label="" MaxValue=@MaxTime Value=@Time />
            </HxProgress>
        </div>
    </div>
    }
</div>
<table class="table table-sm">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Result</th>
            <th scope="col">Tries</th>
            <th scope="col">Score</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < CurrentResults.Results.Count; i++) {
            var it = CurrentResults.Results[i];
            string resultStr = "";
            switch (it.LR) {
                case Lookups.ListenResult.Matched:
                    resultStr = "\u2714"; // tick
                    break;
                case Lookups.ListenResult.Failed:
                    resultStr = "\u2718"; // cross
                    break;
                case Lookups.ListenResult.Abandoned:
                    resultStr = "\u2700"; // scissors
                    break;
                case Lookups.ListenResult.Timeout:
                    resultStr = "\u231a"; // clock
                    break;
            }
            <tr>
                <th scope="row">@($"{it.TestDef.SeqNumber + 1}/{CurrentResults.SetDefinition.TotalTests()}")</th>
                <td>@resultStr</td>
                <td>@it.Tries</td>
                <td>@(_musicEngine.ScoreTest(it))</td>
            </tr>

        }
        @if (CurrentResults.Results.Count > 0) {
            <tr>
                <th scope="row"></th>
                <td></td>
                <td></td>
                <td>@(_musicEngine.CalculateScore(CurrentResults))%</td>
            </tr>
        }

    </tbody>
</table>
