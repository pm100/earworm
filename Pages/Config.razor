@page "/config"
@inject IJSRuntime JS
@implements IDisposable


@using EarWorm.Code;
@inject SavedData _saver
@inject MusicEngine _musicEngine

<PageTitle>Configure</PageTitle>
<DropDown Items=@Items ButtonText="Select Instrument" Selected=@Selected
OnSelectionChange=@InstrumentChanged/>
<Listener @ref=_listener/>
<HxButton Text="Test Audio" OnClick="TestAudio" Color="ThemeColor.Primary"/>

<HxInputCheckbox @bind-Value="SleepChecked" Label="Prevent Device Sleeping While Playing" />

<HxInputCheckbox @bind-Value="KeySig" Label="Show real key signature" />

@code {

    Dictionary<string, Instrument> _instrumentTable;
    List<string> _instrumentKeys;
    List<string> _instrumentNames;
    Listener _listener;
    public Config()
    {
        Util.Log("const config");
        _instrumentTable = Lookups.Instruments;
        _instrumentKeys = _instrumentTable.Keys.ToList();
        _instrumentNames = _instrumentTable.Values.Select(ins=>ins.Name).ToList();

    }
    public bool KeySig {
        get{
            return _saver.Settings.KeySig;
        }
        set
        { _saver.Settings.KeySig = value; }
    }
    public bool SleepChecked{ get {
            return _saver.Settings.NoSleep;
        }
        set {
            _saver.Settings.NoSleep = value;
        } }
    public List<string> Items { get
        {
            return _instrumentNames;
        } }
    public int Selected
    {
        get
        {
            var sel = _musicEngine.GetCurrentInstrument();
            return _instrumentKeys.FindIndex(x => x == sel.Key);
        }
    }
    private void Play()
    {
        var notes = new string[]{ "c4", "e4", "g5"};
        JS.InvokeVoidAsync("playChord",notes,0);
    }

    private void InstrumentChanged(int value)
    {
        Util.Log($"inst = {value}");
        var k = _instrumentKeys[value];
        _saver.Settings.InstrumentKey = k;
    }
    private async void TestAudio() {
        var fakeTest = new TestDefinition {
              Key = _saver.CurrentSet.Key
            };
        await _listener.Show(Listener.Mode.Train, fakeTest);
    }
    public void Dispose() {
        Util.Log("displose config");
        _saver.SaveSettings();
        _saver.SaveSetDefs();
    }
}


